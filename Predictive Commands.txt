a)K-Nearest Neighbour Classification
1.Importing the dataset
data=read.csv(file.choose())
View(data)
data=data[-1]

# Using Normalization technique
normalize <- function(x) {
  return ((x - min(x)) / (max(x) - min(x)))
}
data_n <- as.data.frame(lapply(data[1:6],
                               normalize))

data_n$DiseasePresent <- data$DiseasePresent

# Splitting the dataset into the Training set and Test set
install.packages("CaTools")
library(caTools)
set.seed(42)  
split <- sample.split(data_n$DiseasePresent, SplitRatio = 0.7)
data_train <- subset(data_n, split == TRUE)
data_test <- subset(data_n, split == FALSE)

data_train_labels <- data_train$DiseasePresent
data_test_labels <- data_test$DiseasePresent

data_train <- data_train[-ncol(data_train)]  
data_test <- data_test[-ncol(data_test)]     


install.packages("class")
library(class)

# KNN Implementation
data_test_pred <- knn(train = data_train,
                      test = data_test,
                      cl = data_train_labels,
                      k = 22)
data_test_pred

install.packages("gmodels")
library(gmodels)
CrossTable(x = data_test_labels,
           y = data_test_pred
)

# Confusion Matrix
cm <- table(data_test_labels, data_test_pred)
cm

# Prediction of Accuracy
Accuracy_KNN <- sum(data_test_pred == data_test_labels)/length(data_test_labels)
print(paste("Accuracy:", round(Accuracy_KNN * 100, 2), "%"))


# Convert the confusion matrix to a data frame for ggplot2
cm_df <- as.data.frame(cm)
colnames(cm_df) <- c("Actual", "Predicted", "Count")

# Plotting the confusion matrix using ggplot2
ggplot(cm_df, aes(x = Predicted, y = Actual, fill = Count)) +
  geom_tile() +
  geom_text(aes(label = Count), color = "white", size = 6) +
  scale_fill_gradient(low = "lightblue", high = "blue") +
  labs(title = "Confusion Matrix", x = "Predicted Labels", y = "Actual Labels") +
  theme_minimal()



b)Support Vector Machine

# Importing the dataset
dataset = read.csv(file.choose())
dataset = dataset[-1]
View(dataset)

# Encoding the target feature as factor
dataset$DiseasePresent = factor(dataset$DiseasePresent, levels = c(0, 1))

# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$DiseasePresent, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)

# Feature Scaling
train_scale <- scale(training_set[, 1:6])
train_scale
test_scale <- scale(test_set[, 1:6])
test_scale

# Fitting SVM to the Training set
# install.packages("e1071")
library(e1071)
classifier1 = svm(formula = DiseasePresent ~ .,
                 data = training_set,
                 type = 'C-classification',
                 kernel = 'linear')

# Predicting the Test set results
y_pred = predict(classifier1, newdata = test_set[1:6])
y_pred

# Making the Confusion Matrix
cm = table(test_set$DiseasePresent, y_pred)
cm

# Convert the confusion matrix to a data frame for ggplot2
cm_df <- as.data.frame(cm)
colnames(cm_df) <- c("Actual", "Predicted", "Count")

# Plotting the confusion matrix using ggplot2
ggplot(cm_df, aes(x = Predicted, y = Actual, fill = Count)) +
  geom_tile() +
  geom_text(aes(label = Count), color = "white", size = 6) +
  scale_fill_gradient(low = "red", high = "orange") +
  labs(title = "Confusion Matrix", x = "Predicted Labels", y = "Actual Labels") +
  theme_minimal()

#Accuracy Prediction
Accuracy_SVM <- sum(diag(cm)) / sum(cm)
print(paste("Accuracy:", round(Accuracy_SVM * 100, 2), "%"))


c)Random Forest Classification Algorithm

# Importing the dataset
dataset = read.csv(file.choose())
dataset = dataset[-1]
View(dataset)

# Encoding the target feature as factor
dataset$DiseasePresent = factor(dataset$DiseasePresent, levels = c(0, 1))

# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$DiseasePresent, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)

# Feature Scaling
train_scale <- scale(training_set[, 1:6])
train_scale
test_scale <- scale(test_set[, 1:6])
test_scale

# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[, 1:6],
                          y = training_set$DiseasePresent,
                          ntree = 500)

y_pred = predict(classifier, newdata = test_set[, 1:6])
y_pred

# Making the Confusion Matrix
cm = table(test_set$DiseasePresent, y_pred)
cm

# Convert the confusion matrix to a data frame for ggplot2
cm_df <- as.data.frame(cm)
colnames(cm_df) <- c("Actual", "Predicted", "Count")

# Plotting the confusion matrix using ggplot2
ggplot(cm_df, aes(x = Predicted, y = Actual, fill = Count)) +
  geom_tile() +
  geom_text(aes(label = Count), color = "white", size = 6) +
  scale_fill_gradient(low = "red", high = "orange") +
  labs(title = "Confusion Matrix", x = "Predicted Labels", y = "Actual Labels") +
  theme_minimal()

#Accuracy Prediction
Accuracy_SVM <- sum(diag(cm)) / sum(cm)
print(paste("Accuracy:", round(Accuracy_SVM * 100, 2), "%"))


d)Naive Bayes Model

# Importing the dataset
dataset = read.csv(file.choose())
dataset = dataset[-1]
View(dataset)

# Using Normalization technique
normalize <- function(x) {
  return ((x - min(x)) / (max(x) - min(x)))
}

data_n <- as.data.frame(lapply(dataset[1:6],
                               normalize))

data_n$DiseasePresent <- dataset$DiseasePresent

# Loading package
library(e1071)
library(caTools)

# Splitting data into train and test data
split <- sample.split(dataset, SplitRatio = 0.7)
split
train_cl <- subset(dataset, split == "TRUE")
train_cl
test_cl <- subset(dataset, split == "FALSE")
test_cl

# Feature Scaling
train_scale <- scale(train_cl[, 1:6])
train_scale
test_scale <- scale(test_cl[, 1:6])
test_scale

# Fitting Naive Bayes Model to training dataset

classifier_cl <- naiveBayes(DiseasePresent ~ .,
                            data = train_cl)
classifier_cl

# Predicting on test data
y_pred <- predict(classifier_cl,
                  newdata = test_cl)
y_pred

# Confusion Matrix
cm <- table(test_cl$DiseasePresent, y_pred)
cm

# Convert the confusion matrix to a data frame for ggplot2
cm_df <- as.data.frame(cm)
colnames(cm_df) <- c("Actual", "Predicted", "Count")

# Plotting the confusion matrix using ggplot2
ggplot(cm_df, aes(x = Predicted, y = Actual, fill = Count)) +
  geom_tile() +
  geom_text(aes(label = Count), color = "white", size = 6) +
  scale_fill_gradient(low = "brown", high = "pink") +
  labs(title = "Confusion Matrix", x = "Predicted Labels", y = "Actual Labels") +
  theme_minimal()

#Accuracy Prediction
Accuracy_NB <- sum(diag(cm)) / sum(cm)
print(paste("Accuracy:", round(Accuracy_NB * 100, 2), "%"))



